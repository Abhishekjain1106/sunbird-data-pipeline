---
# file: install.yml
- include_vars: all_pass.yml
- name: Create druid deploy directory
  file: path={{ druid_directory }} state=directory mode=0777
        owner={{ ansible_user }}
  become: yes

- name: Create druid deploy directory
  file: path={{ druid_default_tmp_dir }} state=directory mode=0777
        owner={{ ansible_user }}
  become: yes

- name: Create druid logging directory for all nodes
  file: path={{ druid_log_dir }} state=directory mode=0777
        owner={{ ansible_user }}
  become: yes

- name: Create tmp dir only for historical nodes
  file: path={{ druid_historical_tmp_dir }} state=directory mode=0755
        owner={{ ansible_user }}
  become: yes
  when: druid_role == "historical"

- name: Create gc dir for nodes
  file: path={{ druid_gc_logdir }} state=directory mode=0755
        owner={{ ansible_user }}
  become: yes

- name: Create tmp dir only for historical nodes
  file: path={{ druid_historical_segmentcache_path }} state=directory mode=0755
        owner={{ ansible_user }}
  become: yes
  when: druid_role == "historical"

- name: Create tmp dir only for middlemanager nodes
  file: path={{ druid_indexing_task_basedir }} state=directory mode=0755
        owner={{ ansible_user }}
  become: yes
  when: druid_role == "middlemanager"

- name: Create tmp dir only for middlemanager nodes
  file: path={{ druid_middlemanager_peon_segmentcache_path }} state=directory mode=0755
        owner={{ ansible_user }}
  become: yes
  when: druid_role == "middlemanager"

#- name: Download Druid version {{ druid_version }}
#  get_url: url={{ druid_url }}
#           dest={{ druid_directory }}
#           mode=0777
#           force=no

#- name: Un-tar druid download
#  unarchive: src={{ druid_path }}-bin.tar.gz dest={{ druid_directory }}copy=no
#  become: yes

- name: Change ownership of download path
  file: path={{ druid_directory }} owner={{ ansible_user }} recurse=yes mode=0777
  become: yes

- name: Execute command for extensions
  shell: /usr/bin/java -classpath "lib/*" -Ddruid.extensions.directory="{{ druid_path }}extensions" org.apache.druid.cli.Main tools pull-deps --no-default-hadoop -c "org.apache.druid.extensions.contrib:{{ item }}:{{ druid_version }}"
  with_items: "{{ druid_community_extensions }}"
  args: 
    chdir: "{{ druid_path }}"
    executable: /bin/bash

# Druid configurations:
- name: Copy common.properties for Druid node {{ druid_role }}
  template: src=_common/common.runtime.properties dest={{ druid_path }}conf/druid/_common/
        owner={{ ansible_user }} mode=0755
  become: yes

- name: Copy common.properties for Druid node {{ druid_role }}
  template: src=_common/log4j2.xml dest={{ druid_path }}conf/druid/_common/
        owner={{ ansible_user }} mode=0755
  become: yes

- name: Copy over specific configuration for Druid node {{ druid_role }}
  template: src={{ druid_role }}/runtime.properties dest={{ druid_path }}conf/druid/{{ service }}
        owner={{ ansible_user }} mode=0755
  become: yes

- name: Copy over jvm configuration for Druid node {{ druid_role }}
  template: src={{ druid_role }}/jvm.config dest={{ druid_path }}conf/druid/{{ service }}
        owner={{ ansible_user }} mode=0755
  become: yes

- name: Copy the graphite whitelist file
  copy:
    src: files/whitelist
    dest: "{{ druid_path }}whitelist"
    owner: "{{ ansible_user }}"
    mode: 755

