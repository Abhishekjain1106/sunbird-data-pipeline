# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Job
job.factory.class=org.apache.samza.job.yarn.YarnJobFactory
job.name=__env__.ReverseSearch

# YARN
# yarn.package.path=file://${basedir}/target/${project.artifactId}-${pom.version}-dist.tar.gz
yarn.package.path=http://__yarn_host__:__yarn_port__/__env__/${project.artifactId}-${pom.version}-distribution.tar.gz

# Task
task.class=org.ekstep.ep.samza.task.ReverseSearchStreamTask
task.inputs=kafka.__env__.learners,kafka.__env__.ecosystem.sink
task.checkpoint.factory=org.apache.samza.checkpoint.kafka.KafkaCheckpointManagerFactory
task.checkpoint.system=kafka
# Normally, this would be 3, but we have only one broker.
task.checkpoint.replication.factor=1
task.commit.ms=60000

# Metrics
metrics.reporters=snapshot,jmx
metrics.reporter.snapshot.class=org.apache.samza.metrics.reporter.MetricsSnapshotReporterFactory
metrics.reporter.snapshot.stream=kafka.__env__.metrics
metrics.reporter.jmx.class=org.apache.samza.metrics.reporter.JmxReporterFactory

# Serializers
serializers.registry.json.class=org.apache.samza.serializers.JsonSerdeFactory
serializers.registry.metrics.class=org.apache.samza.serializers.MetricsSnapshotSerdeFactory

# Key-value storage
serializers.registry.string.class=org.apache.samza.serializers.StringSerdeFactory
stores.reverse-search.factory=org.apache.samza.storage.kv.RocksDbKeyValueStorageEngineFactory
stores.reverse-search.key.serde=string
stores.reverse-search.msg.serde=json
stores.device.factory=org.apache.samza.storage.kv.RocksDbKeyValueStorageEngineFactory
stores.device.key.serde=string
stores.device.msg.serde=json
stores.device.changelog=kafka.__env__.device-changelog
stores.device.changelog.replication.factor=1

# Systems
systems.kafka.samza.factory=org.apache.samza.system.kafka.KafkaSystemFactory
systems.kafka.samza.msg.serde=json
# systems.kafka.consumer.zookeeper.connect=localhost:2181/
systems.kafka.consumer.zookeeper.connect=__zookeepers__
systems.kafka.consumer.auto.offset.reset=largest
systems.kafka.producer.bootstrap.servers=__kafka_brokers__
systems.kafka.streams.metrics.samza.msg.serde=metrics
systems.kafka.streams.kafka.sandbox.learners.samza.reset.offset=true
systems.kafka.streams.kafka.sandbox.learners.samza.offset.default=oldest
systems.kafka.streams.sandbox.learners.samza.reset.offset=true
systems.kafka.streams.sandbox.learners.samza.offset.default=oldest

# Job Coordinator
job.coordinator.system=kafka
# Normally, this would be 3, but we have only one broker.
job.coordinator.replication.factor=1

google.api.key=AIzaSyDd1SVvNpqDYQKAghY1-aY2EtdBoPI94l4
output.success.topic.name=__env__.telemetry.with_location
output.failed.topic.name=__env__.telemetry.with_location.fail
