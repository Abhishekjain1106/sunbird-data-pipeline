task :default => :console

task :console do
  ruby "-Ilib -S irb"
end

namespace :setup do
  task :elasticsearch do
    require_relative '../data-indexer/indexers.rb'
    client = ::Indexers::Elasticsearch.new(true)
  end
end

namespace :uploaders do
  namespace :numeracy do
    task :assessment do
      require_relative '../uploaders/numeracy/assessment.rb'
      Uploaders::Numeracy::Assessment.upload
    end
  end
end

namespace :cleaners do
  task :oe_summary do
    require_relative '../data-remover/oe_remover.rb'
    OERemover.remove('OE_SUMMARY')
  end
  task :ge_signup do
    require_relative '../data-remover/oe_remover.rb'
    require_relative '../data-remover/ge_signup_cleanup.rb'
    OERemover.remove('GE_SIGNUP')
    Removers::GeSignupCleanup.remove
  end
end

namespace :scheduled do
  task :reverse_search do
    require_relative '../data-async-processors/geo_reverse_search.rb'
    require_relative '../data-indexer/indexers.rb'
    client = ::Indexers::Elasticsearch.new(false)
    # Processors::ReverseSearch.perform do |loc,ldata,hit|

    # end
    Processors::ReverseSearch2.perform
  end
  task :set_ldata do
    require_relative '../data-async-processors/set_ldata.rb'
    require_relative '../data-indexer/indexers.rb'
    # Processors::SetLdata.perform
    Processors::SetLdata2.perform
  end
  task :generate_signup do
    require_relative '../data-async-processors/signup_processor.rb'
    # require_relative '../data-indexer/indexers.rb'
    Processors::SignupProcessor.perform
  end
  task :oe_summarize do
    require_relative '../data-async-processors/oe_summary_generator.rb'
    require_relative '../data-indexer/indexers.rb'
    client = ::Indexers::Elasticsearch.new(false)
    Processors::OeSummaryGenerator.perform
  end
  task :signup_geo_tag do
    require_relative '../data-async-processors/signup_geo_tagger.rb'
    require_relative '../data-indexer/indexers.rb'
    client = ::Indexers::Elasticsearch.new(false)
    Processors::SignupGeoTagger.perform
  end
end

namespace :generators do
  task :sessions do
    require_relative '../data-generator/session_generator.rb'
    require 'ruby-progressbar'
    client = ::Indexers::Elasticsearch.new(true)
    r = Generator::Runner.new
    time = 0
    bar = ProgressBar.create(total: Generator::SESSIONS)
    r.run do |session,logger|
      bar.increment
      session.events.each do |event|
        binding.pry
        # result = client.index('ecosystem-sample-identities','events_v1',event)
        result.merge!(event)
        logger.info "EVENT #{result.to_json}"
      end
    end
  end
end
