#Introduction

ekStep telemetry API are RESTful and stateless. While the server cannot maintain state between sessions, it is important to protect the endpoints from unauthentic clients. HTTP Basic Auth over HTTPS is an alternative but the password needs to be sent in every request and this technique does not let us check the integrity of the message, even if we use transport layer security to avoid eavesdropping.
We could use HMAC-256 to secure protected resources. It does mean that the secret key will be shared and should be (1) large enough, (2) generated randomly and (3) frequently rotated (the mechanisms of which are out of scope of this document).
Additionally, we should also perform a secure checking of hash equality to avoid leakage of time information.
Since, telemetry data can be relayed with delay, using timestamp to verify if the telemetry data is recent and hence, valid is doubted.
To protect against a replay attack, we could use a nonce, however, it is still being considered if that can be handled via rate limiting and de-duplication.
HMAC comparison will not be compared using == to protect from timing attack (hmac.Equals in Go).
The HMAC token will be base64 encoded.

Update 2: Using Goâ€™s hmac.Equals function prevents the leakage of time information and is therefore not vulnerable.

Also, cannot do - verify the timestamp is within 30 seconds of the current time.
We achieve this by encoding the ciphertext with an URL-safe Base64.

To protect against replay attacks

3. Keys

   The key for HMAC can be of any length (keys longer than B bytes are
   first hashed using H).  However, less than L bytes is strongly
   discouraged as it would decrease the security strength of the
   function.  Keys longer than L bytes are acceptable but the extra
   length would not significantly increase the function strength. (A
   longer key may be advisable if the randomness of the key is
   considered weak.)

   Keys need to be chosen at random (or using a cryptographically strong
   pseudo-random generator seeded with a random seed), and periodically
   refreshed.  (Current attacks do not indicate a specific recommended
   frequency for key changes as these attacks are practically
   infeasible.  However, periodic key refreshment is a fundamental
   security practice that helps against potential weaknesses of the
   function and keys, and limits the damage of an exposed key.)





However, exchange of credentials for a JWT token may bring usability issues where an invalid JWT (token) should not interrupt the child playing the game on GENIE. Which also means that a GENIE with an invalid token, may start buffering data till the client re-establishes authenticity. What happens if the client never establishes authenticity? Should telemetry really be concerned by such concerns? Or token expiry is a rare event?
