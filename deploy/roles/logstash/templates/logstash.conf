input {
   file {
      start_position =>"beginning"
      path => "/var/log/telemetry/telemetry.log"
      tags => "telemetry_json"
      codec => "json"
      type => "logs"
   }
}
filter {
  if [level] == "info" {
    ruby {
      init => "
      def filter(event, &block)
        id = event['[data][params][msgid]'];
        unless event['[data][events]'].is_a?(Array)
          return
        end
        event['[data][events]'].each_with_index do |o,i|
          e = LogStash::Event.new(o);
          e['uuid']= id + i.to_s;
          e['type'] = 'events';
          ts = e['ts']
          begin
            ts = DateTime.strptime(ts,'%Y-%m-%dT%H:%M:%S%z')
          rescue
            ts+='+05:30'
            begin
              DateTime.strptime(ts,'%Y-%m-%dT%H:%M:%S%z')
              e['ts'] = ts
            rescue
            end
          end
          yield e
        end
        event.cancel;
      end
      "
      code => ""
    }
  }
}
output {
  stdout{}

  elasticsearch {
    host => "{{ es_host }}"
    protocol => "http"
    index_type => "everything"
    index => "dump"
    document_id => "%{uuid}"
  }

  # only the events needs to push to this index
  if [type] == "events" {
      elasticsearch {
        host => "{{ es_host }}"
        protocol => "http"
        index_type => "events_v1"
        index => "ecosystem-%{+YYYY.MM.dd}"
        document_id => "%{uuid}"
      }
  }

  ## all other events like errors or invalid format will push to logs
  if [type] == "logs" {
      elasticsearch {
        host => "{{ es_host }}"
        protocol => "http"
        index_type => "errors"
        index => "logs-%{+YYYY.MM.dd}"
      }
  }
}
